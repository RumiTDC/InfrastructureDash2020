<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ property name="DestinationConnectionName" type="String" #>
<#@ property name="UtilityConnectionName" type="String" #>
<#@ property name="stageTable" type="DataRow" #>
<#@ property name="ConnectionString_EDW_Utility_ADO" type="String" #>
<#@ code file="../90 BIML Templates/BIMLExtensions.cs"#>

<!--Navision Incremental template begin-->

<#
                string DestinationConnectionADO = BIMLExtensions.GetMetaDataConnectionString(DestinationConnectionName, ConnectionString_EDW_Utility_ADO);

                string IncrementalPostFix = "_ToUpdate";

                bool IncrementalTableExist = BIMLExtensions.TableExist(DestinationConnectionADO,stageTable["DestinationSchemaUnsafe"].ToString().Trim(),stageTable["DestinationTableNameUnsafe"].ToString().Trim() + IncrementalPostFix);
                bool AllowTableRecreation = Convert.ToBoolean(stageTable["AllowTableRecreation"]);
                bool IncludePrimaryKey = Convert.ToBoolean(stageTable["IncludePrimaryKey"]);
                string CreateTableSQL = BIMLExtensions.GetStageTableCreateScript(stageTable, ConnectionString_EDW_Utility_ADO, ConnectionString_EDW_Utility_ADO, stageTable["ConnectionId"].ToString(), IncrementalPostFix);
                
                if(!IncrementalTableExist)
                {
                    BIMLExtensions.ValidateOrCreateStageSchema(stageTable["DestinationSchemaUnsafe"].ToString().Trim(), DestinationConnectionADO);
                    BIMLExtensions.ExecuteSQL(CreateTableSQL, DestinationConnectionADO);
                }
                else if(IncrementalTableExist && AllowTableRecreation)
                {
                    string DropTableSQL = "DROP TABLE " + stageTable["DestinationSchema"].ToString().Trim() + ".[" + stageTable["DestinationTableNameUnsafe"].ToString().Trim() + IncrementalPostFix + "];";
                    DropTableSQL = DropTableSQL + Environment.NewLine + CreateTableSQL;
                    BIMLExtensions.ExecuteSQL(DropTableSQL, DestinationConnectionADO);
                }

#>

<Container ConstraintMode="Parallel" Name="Pre Stage">
	<Tasks>
	    <ExecuteSQL Name="Truncate <#=stageTable["PackageName"].ToString().Trim()#>_ToUpdate" ConnectionName="<#=DestinationConnectionName#>">
	        <Expressions>
	            <Expression PropertyName="SqlStatementSource">"TRUNCATE TABLE [" + @[User::DestinationTableSchema]  + "].[" + @[User::DestinationTableName] + "_ToUpdate]"</Expression>
	        </Expressions>
	        <DirectInput>TRUNCATE TABLE [nav].[Customer_ToUpdate]</DirectInput>
	    </ExecuteSQL>
	    <ExecuteSQL Name="Utility - Get companies to loop" ResultSet="Full" ConnectionName="<#=UtilityConnectionName#>">
			<DirectInput>EXEC setup.GetDynamicsNavCompanies</DirectInput>
			<Results>
				<Result Name="0" VariableName="User.CompaniesToLoop"></Result>
			</Results>
			<PrecedenceConstraints>
			    <Inputs>
			        <Input OutputPathName="Truncate <#=stageTable["PackageName"].ToString().Trim()#>_ToUpdate.Output"/>
			    </Inputs>
	        </PrecedenceConstraints>
		</ExecuteSQL>
		<ExecuteSQL Name="Truncate <#=stageTable["PackageName"].ToString().Trim()#>" ConnectionName="<#=DestinationConnectionName#>">
	        <Expressions>
	            <Expression PropertyName="SqlStatementSource">"TRUNCATE TABLE [" + @[User::DestinationTableSchema]  + "].[" + @[User::DestinationTableName] + "]"</Expression>
	        </Expressions>
	        <DirectInput>TRUNCATE TABLE [nav].[Customer]</DirectInput>
	        <PrecedenceConstraints>
	            <Inputs>
	                <Input OutputPathName="Utility - Get companies to loop.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@FullLoad"/>
	            </Inputs>
	        </PrecedenceConstraints>
	    </ExecuteSQL>
		
	</Tasks>
</Container>


			<ForEachAdoLoop Name="Loop Companies" EnumerationMode="EnumerateRowsInFirstTable" ConstraintMode="Linear" SourceVariableName="User.CompaniesToLoop">

					<VariableMappings>
						<VariableMapping Name="1" VariableName="User.SourceConnectionString"></VariableMapping>
            <VariableMapping Name="2" VariableName="User.NavSqlPrefix"></VariableMapping>
						<VariableMapping Name="0" VariableName="User.CompanyID"></VariableMapping>
					</VariableMappings>
					<Tasks>
            <ExecuteSQL Name="LogDetailCompany Start" ResultSet="SingleRow" ConnectionName="<#=UtilityConnectionName#>">
              <DirectInput>EXEC [log].[LogDetailCompany_Begin] 0, 0</DirectInput>
              <Results>
                <Result Name="0" VariableName="User.LogDetailCompanyID"></Result>
              </Results>
              <Expressions>
                <Expression ExternalProperty="SqlStatementSource">"EXEC [log].[LogDetailCompany_Begin] " + (DT_WSTR, 20)@[User::LogDetailID] + ", " +  (DT_WSTR, 20)@[User::CompanyID]</Expression>
              </Expressions>
            </ExecuteSQL>
            <ExecuteSQL Name="Get Max timestamp from stage" ConnectionName="<#=DestinationConnectionName#>" ResultSet="SingleRow">
                <DirectInput>
                    SELECT CAST(ISNULL(MAX(timestamp), 0) AS bigint) AS TimeStampMax FROM nav.Customer
                </DirectInput>
                <Expressions>
                    <Expression ExternalProperty="SqlStatementSource">"SELECT CAST(ISNULL(MAX(timestamp), 0) AS bigint) AS TimestampMax FROM [" + @[User::DestinationTableSchema]  + "].[" + @[User::DestinationTableName] + "] WHERE [CompanyID] = " +  (DT_WSTR, 50)  @[User::CompanyID]</Expression>
                </Expressions>
                <Results>
                    <Result Name="TimestampMax" VariableName="User.TimestampMax"></Result>
                </Results>
            </ExecuteSQL>

            <Dataflow Name="Source to Stage">
							<Transformations>
								<OleDbSource ConnectionName="<#=stageTable["SourceConnectionName"].ToString()#>" Name="<#=stageTable["DataFLowSourceName"].ToString()#>" ValidateExternalMetadata="false">
									<VariableInput VariableName="User.SourceSqlSelect"></VariableInput>
								</OleDbSource>
								<#@ include file="../90 BIML Templates/Snippet_RowCountFetch.biml" #>


                                <#
                                if(Convert.ToBoolean(stageTable["TrimChars"].ToString()))
                                {
                                    string SourceConnectionString = BIMLExtensions.GetMetaDataConnectionString(stageTable["SourceConnectionNameUnsafe"].ToString(), ConnectionString_EDW_Utility_ADO);
                                    string NavisionTableName = stageTable["NavisionCompanyPrefix"].ToString() + "$" + stageTable["SourceTableNameUnsafe"].ToString();
                                    //DataTable CharColumns = BIMLExtensions.GetCharColumnsForTableOrView(stageTable["SourceSchemaUnsafe"].ToString(), NavisionTableName, SourceConnectionString, stageTable["ConnectionId"].ToString());
                                    // Todo Make connectionstring dynamic
                                    DataTable CharColumns = BIMLExtensions.GetCharColumnsForTableOrView(stageTable["SourceSchemaUnsafe"].ToString(), stageTable["SourceTableNameUnsafe"].ToString(), ConnectionString_EDW_Utility_ADO, stageTable["ConnectionId"].ToString());
                                    DataTable DataTypeConversions = BIMLExtensions.GetDataTypeConversions(ConnectionString_EDW_Utility_ADO, stageTable["DataConversionType"].ToString());
                                    #>
    								<DerivedColumns Name="TrimChars">
    									<Columns>
                                    
                                    <#
                                    foreach(DataRow charColumn in CharColumns.Rows)
                                    {
                                        string CharLength = charColumn["CHARACTER_MAXIMUM_LENGTH"].ToString();
                                         //  ValidationReporter.Report(Severity.Error, charColumn["DATA_TYPE"].ToString());
                                    #> 
    										<Column Name="<#=charColumn["COLUMN_NAME"].ToString()#>" ReplaceExisting="true" Length="<#=CharLength#>" DataType="<#=BIMLExtensions.GetDataType(DataTypeConversions, charColumn, "BIMLDataType")#>">TRIM([<#=charColumn["COLUMN_NAME"].ToString()#>])</Column>
                                    <#
                                    }
                                    #>
    									</Columns>
    								</DerivedColumns>
                                    <#
                                }
                                #>
				                


								<DerivedColumns Name="CompanyID">
									<Columns>
										<Column Name="CompanyID" DataType="Int32" >@[User::CompanyID]</Column>
									</Columns>
								</DerivedColumns>
								<#@ include file="../90 BIML Templates/Snippet_RowCountInsert.biml" #>

								<OleDbDestination Name="Stage <#=stageTable["DestinationTableNameUnsafe"].ToString()#>" ConnectionName="<#=DestinationConnectionName#>" KeepIdentity="false" KeepNulls="false" UseFastLoadIfAvailable="true">
									<ExternalTableOutput Table="<#=stageTable["DestinationSchema"].ToString()#>.[<#=stageTable["DestinationTableNameUnsafe"].ToString()#>_ToUpdate]"></ExternalTableOutput>
								</OleDbDestination>
							</Transformations>
						</Dataflow>
            <ExecuteSQL Name="Merge Changes" ResultSet="None" ConnectionName="<#=DestinationConnectionName#>">
                <DirectInput>EXEC dbo.IncrementalMerge</DirectInput>
                <Expressions>
                    <Expression ExternalProperty="SqlStatementSource">"EXEC [dbo].[IncrementalMerge] '" + @[User::DestinationTableSchema] + "', '" + @[User::DestinationTableName] + "'"</Expression>
                </Expressions>
            </ExecuteSQL>
            <ExecuteSQL Name="LogDetailCompany End" ResultSet="None" ConnectionName="<#=UtilityConnectionName#>">
              <DirectInput>EXEC [log].[LogDetailCompany_End] 0, 0, 0</DirectInput>
              <Expressions>
                <Expression ExternalProperty="SqlStatementSource">"EXEC [log].[LogDetailCompany_End] " + (DT_WSTR, 20)@[User::LogDetailCompanyID] + ", " +  (DT_WSTR, 20)@[User::RowCountFetch] + ", " +  (DT_WSTR, 20)@[User::RowCountInsert]</Expression>
              </Expressions>
            </ExecuteSQL>

          </Tasks>
		</ForEachAdoLoop>

<!--Navision Incremental template end-->
